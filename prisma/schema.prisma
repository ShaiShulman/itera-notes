// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  itineraries   Itinerary[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Itinerary {
  id              String   @id @default(cuid())
  userId          String
  title           String?
  editorData      String   // JSON stringified EditorData (canonical source)
  version         String   @default("1.0")
  hash            String   // Content hash for change detection
  
  // Form metadata fields
  destination     String
  startDate       DateTime
  endDate         DateTime
  interests       Json     // JSON array of selected interests
  travelStyle     String
  additionalNotes String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  directions      ItineraryDirections[]
  
  @@index([userId, updatedAt])
}

model ItineraryDirections {
  id               String     @id @default(cuid())
  itineraryId      String
  dayIndex         Int
  color            String
  directionsResult String     // JSON stringified DirectionsResponse
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  itinerary        Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  
  @@unique([itineraryId, dayIndex])
}